/**
 * Build Demo Script for EspWOL
 * Copies source files and adds mock data for demo version
 */

const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');

// Paths
const SRC_DIR = path.join(__dirname, '../src');
const DEMO_DIR = path.join(__dirname, '../../demo');

// Ensure the demo directory exists
fs.ensureDirSync(DEMO_DIR);

/**
 * Main build function
 */
async function build() {
  console.log(chalk.bold.cyan('ðŸ”¨ Building Demo Version'));

  try {
    // Clean and copy src to demo
    console.log(chalk.blue('ðŸ“‚ Copying source files to demo directory...'));
    await fs.emptyDir(DEMO_DIR);
    await fs.copy(SRC_DIR, DEMO_DIR);
    console.log(chalk.green('âœ… Files copied successfully'));

    // Crear archivo mock-data.js en demo/js
    console.log(chalk.blue('ðŸ’‰ Creating mock data for demo...'));
    const mockDataPath = path.join(DEMO_DIR, 'js/mock-data.js');
    const mockDataContent = generateMockDataContent();
    await fs.writeFile(mockDataPath, mockDataContent);
    console.log(chalk.green('âœ… Mock data created successfully'));

    // Modificar index.html para incluir mock-data.js
    console.log(chalk.blue('ðŸ”§ Updating index.html to include mock data...'));
    const indexPath = path.join(DEMO_DIR, 'index.html');
    let indexContent = await fs.readFile(indexPath, 'utf8');
    
    // Insertar mock-data.js antes de api.js
    indexContent = indexContent.replace(
      '<script src="js/api.js"></script>',
      '<script src="js/mock-data.js"></script>\n    <script src="js/api.js"></script>'
    );
    
    await fs.writeFile(indexPath, indexContent);
    console.log(chalk.green('âœ… index.html updated successfully'));

    // AÃ±adir notificaciÃ³n de modo demo
    console.log(chalk.blue('ðŸ”® Adding demo mode indicator...'));
    let styleContent = await fs.readFile(path.join(DEMO_DIR, 'css/style.css'), 'utf8');
    styleContent += generateDemoModeCSS();
    await fs.writeFile(path.join(DEMO_DIR, 'css/style.css'), styleContent);
    
    // Modificar index.html para agregar indicador de modo demo
    indexContent = indexContent.replace(
      '<h1 class="text-center">Wake on LAN</h1>',
      '<h1 class="text-center">Wake on LAN <span class="demo-badge">DEMO</span></h1>'
    );
    await fs.writeFile(indexPath, indexContent);
    console.log(chalk.green('âœ… Demo mode indicator added'));

    console.log(chalk.bold.green('âœ¨ Demo build completed successfully!'));
  } catch (error) {
    console.error(chalk.bold.red('ðŸ’¥ Build failed:'), error);
    process.exit(1);
  }
}

/**
 * Generate the content for mock-data.js
 */
function generateMockDataContent() {
  return `/**
 * Mock Data for EspWOL Demo Mode
 * This file is auto-generated by build-demo.js
 */

// Override fetch for demo mode
const originalFetch = window.fetch;

// Sample hosts data
const mockHosts = [
  {
    name: 'Server',
    mac: '76:14:22:af:23:46',
    ip: '192.168.1.101',
    periodicPing: 0,
    lastPing: -1
  },
  {
    name: 'PC',
    mac: '76:14:22:af:23:46',
    ip: '192.168.1.102',
    periodicPing: 3600,
    lastPing: 1000
  }
];

// Other simulated data
const mockData = {
  about: {
    version: '2.0.0',
    lastVersion: '2.1.0',
    notesLastVersion:
      'Add DNS field to network configuration and fix update functionality to the latest version. Enhance UI user experience.',
    hostname: 'demo-host'
  },
  networkSettings: {
    enable: true,
    ip: '192.168.1.100',
    networkMask: '255.255.255.0',
    gateway: '192.168.1.1',
    dns: '8.8.8.8'
  },
  authenticationSettings: {
    enable: true,
    username: 'admin',
    password: 'password123'
  }
};

// Helper to simulate network delay
function delay(ms = 500) {
  return new Promise(resolve => setTimeout(resolve, ms + Math.random() * 300));
}

// Override fetch for API simulation
window.fetch = async function(url, options = {}) {
  console.log('Demo mode: intercepting fetch to', url);
  
  // Simulate network delay
  await delay();
  
  // Get request method
  const method = options.method || 'GET';
  
  // Parse request body if present
  let body = null;
  if (options.body) {
    try {
      body = JSON.parse(options.body);
    } catch (e) {
      console.error('Error parsing request body:', e);
    }
  }
  
  // Host endpoints
  if (url.startsWith('/hosts')) {
    // Get all hosts
    if (url === '/hosts' && method === 'GET') {
      return createResponse(mockHosts);
    }
    
    // Add host
    if (url === '/hosts' && method === 'POST' && body) {
      mockHosts.push({...body, lastPing: -1});
      return createResponse({ 
        success: true, 
        message: 'Host added successfully' 
      });
    }
    
    // Get single host
    if (url.startsWith('/hosts?id=') && method === 'GET') {
      const id = parseInt(url.split('=')[1]);
      if (id >= 0 && id < mockHosts.length) {
        const host = { ...mockHosts[id] };
        if (host.lastPing !== -1) {
          host.lastPing = Math.floor((Date.now() - host.lastPing) / 1000);
        }
        return createResponse(host);
      }
      return createErrorResponse('Host not found');
    }
    
    // Update host
    if (url.startsWith('/hosts?id=') && method === 'PUT' && body) {
      const id = parseInt(url.split('=')[1]);
      if (id >= 0 && id < mockHosts.length) {
        mockHosts[id] = {...body, lastPing: mockHosts[id].lastPing};
        return createResponse({ 
          success: true, 
          message: 'Host updated successfully' 
        });
      }
      return createErrorResponse('Host not found');
    }
    
    // Delete host
    if (url.startsWith('/hosts?id=') && method === 'DELETE') {
      const id = parseInt(url.split('=')[1]);
      if (id >= 0 && id < mockHosts.length) {
        mockHosts.splice(id, 1);
        return createResponse({ 
          success: true, 
          message: 'Host deleted successfully' 
        });
      }
      return createErrorResponse('Host not found');
    }
  }
  
  // Ping host
  if (url.startsWith('/ping')) {
    const id = parseInt(url.split('=')[1]);
    if (id >= 0 && id < mockHosts.length) {
      const success = Math.random() > 0.3;
      if (success) {
        mockHosts[id].lastPing = Date.now();
      }
      return createResponse({ 
        success, 
        message: success ? 'Ping successful' : 'Ping failed' 
      });
    }
    return createErrorResponse('Host not found');
  }
  
  // Wake host
  if (url.startsWith('/wake')) {
    const success = Math.random() > 0.2;
    return createResponse({ 
      success, 
      message: success ? 'WOL packet sent successfully' : 'Failed to send WOL packet' 
    });
  }
  
  // Settings endpoints
  if (url === '/about') {
    return createResponse(mockData.about);
  }
  
  if (url === '/networkSettings' && method === 'GET') {
    return createResponse(mockData.networkSettings);
  }
  
  if (url === '/networkSettings' && method === 'PUT' && body) {
    Object.assign(mockData.networkSettings, body);
    return createResponse({ 
      success: true, 
      message: 'Network settings updated successfully' 
    });
  }
  
  if (url === '/authenticationSettings' && method === 'GET') {
    // Exclude password from response
    return createResponse({
      enable: mockData.authenticationSettings.enable,
      username: mockData.authenticationSettings.username
    });
  }
  
  if (url === '/authenticationSettings' && method === 'PUT' && body) {
    Object.assign(mockData.authenticationSettings, body);
    return createResponse({ 
      success: true, 
      message: 'Authentication settings updated successfully' 
    });
  }
  
  if (url === '/updateVersion' && method === 'GET') {
    return createResponse({
      version: mockData.about.version,
      lastVersion: mockData.about.lastVersion,
      notesLastVersion: mockData.about.notesLastVersion
    });
  }
  
  if (url === '/updateVersion' && method === 'POST') {
    const hasUpdate = mockData.about.version !== mockData.about.lastVersion;
    return createResponse({
      success: hasUpdate,
      message: hasUpdate 
        ? 'Update process will start in 1 second. Please wait for the update to complete.' 
        : 'Nothing to upgrade. You are up to date!'
    });
  }
  
  if (url === '/resetWifi' && method === 'POST') {
    return createResponse({ 
      success: true, 
      message: 'WiFi settings have been reset successfully.' 
    });
  }
  
  if (url === '/import' && method === 'POST' && body) {
    if (Array.isArray(body)) {
      mockHosts.push(...body.map(host => ({...host, lastPing: -1})));
      return createResponse({ 
        success: true, 
        message: \`Imported \${body.length} hosts successfully.\` 
      });
    }
    return createErrorResponse('Invalid data format');
  }

  // If we reach here, endpoint is not mocked
  console.log('Demo mode: Unhandled request', url, method);
  return createErrorResponse('Endpoint not simulated in demo mode', 404);
};

// Helper function to create success response
function createResponse(data, status = 200) {
  return new Response(JSON.stringify(data), {
    status: status,
    headers: { 'Content-Type': 'application/json' }
  });
}

// Helper function to create error response
function createErrorResponse(message, status = 400) {
  return new Response(JSON.stringify({ 
    success: false, 
    message: message 
  }), {
    status: status,
    headers: { 'Content-Type': 'application/json' }
  });
}

// Notify that demo mode is active
console.log('%c ðŸŽ® EspWOL Demo Mode Active ', 'background: #ff9800; color: white; font-size: 12px; font-weight: bold; padding: 2px 6px; border-radius: 2px;');
`;
}

/**
 * Generate CSS for demo mode indicator
 */
function generateDemoModeCSS() {
  return `
/* Demo Mode Indicator */
.demo-badge {
  display: inline-block;
  background-color: #ff9800;
  color: white;
  font-size: 0.5em;
  padding: 0.2em 0.5em;
  border-radius: 4px;
  vertical-align: middle;
  margin-left: 0.5em;
  position: relative;
  top: -0.1em;
  font-weight: bold;
  animation: pulse-demo 2s infinite;
}

@keyframes pulse-demo {
  0% { opacity: 1; }
  50% { opacity: 0.7; }
  100% { opacity: 1; }
}
`;
}

// Run the build
build();